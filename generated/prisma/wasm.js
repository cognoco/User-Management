
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Audit_log_entriesScalarFieldEnum = {
  instance_id: 'instance_id',
  id: 'id',
  payload: 'payload',
  created_at: 'created_at',
  ip_address: 'ip_address'
};

exports.Prisma.Flow_stateScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  auth_code: 'auth_code',
  code_challenge_method: 'code_challenge_method',
  code_challenge: 'code_challenge',
  provider_type: 'provider_type',
  provider_access_token: 'provider_access_token',
  provider_refresh_token: 'provider_refresh_token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  authentication_method: 'authentication_method',
  auth_code_issued_at: 'auth_code_issued_at'
};

exports.Prisma.IdentitiesScalarFieldEnum = {
  provider_id: 'provider_id',
  user_id: 'user_id',
  identity_data: 'identity_data',
  provider: 'provider',
  last_sign_in_at: 'last_sign_in_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email: 'email',
  id: 'id'
};

exports.Prisma.InstancesScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  raw_base_config: 'raw_base_config',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Mfa_amr_claimsScalarFieldEnum = {
  session_id: 'session_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  authentication_method: 'authentication_method',
  id: 'id'
};

exports.Prisma.Mfa_challengesScalarFieldEnum = {
  id: 'id',
  factor_id: 'factor_id',
  created_at: 'created_at',
  verified_at: 'verified_at',
  ip_address: 'ip_address',
  otp_code: 'otp_code',
  web_authn_session_data: 'web_authn_session_data'
};

exports.Prisma.Mfa_factorsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  friendly_name: 'friendly_name',
  factor_type: 'factor_type',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  secret: 'secret',
  phone: 'phone',
  last_challenged_at: 'last_challenged_at',
  web_authn_credential: 'web_authn_credential',
  web_authn_aaguid: 'web_authn_aaguid'
};

exports.Prisma.One_time_tokensScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token_type: 'token_type',
  token_hash: 'token_hash',
  relates_to: 'relates_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Refresh_tokensScalarFieldEnum = {
  instance_id: 'instance_id',
  id: 'id',
  token: 'token',
  user_id: 'user_id',
  revoked: 'revoked',
  created_at: 'created_at',
  updated_at: 'updated_at',
  parent: 'parent',
  session_id: 'session_id'
};

exports.Prisma.Saml_providersScalarFieldEnum = {
  id: 'id',
  sso_provider_id: 'sso_provider_id',
  entity_id: 'entity_id',
  metadata_xml: 'metadata_xml',
  metadata_url: 'metadata_url',
  attribute_mapping: 'attribute_mapping',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name_id_format: 'name_id_format'
};

exports.Prisma.Saml_relay_statesScalarFieldEnum = {
  id: 'id',
  sso_provider_id: 'sso_provider_id',
  request_id: 'request_id',
  for_email: 'for_email',
  redirect_to: 'redirect_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  flow_state_id: 'flow_state_id'
};

exports.Prisma.Schema_migrationsScalarFieldEnum = {
  version: 'version'
};

exports.Prisma.SessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  factor_id: 'factor_id',
  aal: 'aal',
  not_after: 'not_after',
  refreshed_at: 'refreshed_at',
  user_agent: 'user_agent',
  ip: 'ip',
  tag: 'tag'
};

exports.Prisma.Sso_domainsScalarFieldEnum = {
  id: 'id',
  sso_provider_id: 'sso_provider_id',
  domain: 'domain',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Sso_providersScalarFieldEnum = {
  id: 'id',
  resource_id: 'resource_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  instance_id: 'instance_id',
  id: 'id',
  aud: 'aud',
  role: 'role',
  email: 'email',
  encrypted_password: 'encrypted_password',
  email_confirmed_at: 'email_confirmed_at',
  invited_at: 'invited_at',
  confirmation_token: 'confirmation_token',
  confirmation_sent_at: 'confirmation_sent_at',
  recovery_token: 'recovery_token',
  recovery_sent_at: 'recovery_sent_at',
  email_change_token_new: 'email_change_token_new',
  email_change: 'email_change',
  email_change_sent_at: 'email_change_sent_at',
  last_sign_in_at: 'last_sign_in_at',
  raw_app_meta_data: 'raw_app_meta_data',
  raw_user_meta_data: 'raw_user_meta_data',
  is_super_admin: 'is_super_admin',
  created_at: 'created_at',
  updated_at: 'updated_at',
  phone: 'phone',
  phone_confirmed_at: 'phone_confirmed_at',
  phone_change: 'phone_change',
  phone_change_token: 'phone_change_token',
  phone_change_sent_at: 'phone_change_sent_at',
  confirmed_at: 'confirmed_at',
  email_change_token_current: 'email_change_token_current',
  email_change_confirm_status: 'email_change_confirm_status',
  banned_until: 'banned_until',
  reauthentication_token: 'reauthentication_token',
  reauthentication_sent_at: 'reauthentication_sent_at',
  is_sso_user: 'is_sso_user',
  deleted_at: 'deleted_at',
  is_anonymous: 'is_anonymous'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  method: 'method',
  path: 'path',
  user_id: 'user_id',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  status_code: 'status_code',
  response_time: 'response_time',
  query_params: 'query_params',
  request_body: 'request_body',
  headers: 'headers',
  error: 'error',
  created_at: 'created_at'
};

exports.Prisma.Company_addressesScalarFieldEnum = {
  id: 'id',
  company_id: 'company_id',
  type: 'type',
  street_line1: 'street_line1',
  street_line2: 'street_line2',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  is_primary: 'is_primary',
  validated: 'validated',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Company_profilesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  legal_name: 'legal_name',
  registration_number: 'registration_number',
  tax_id: 'tax_id',
  website: 'website',
  industry: 'industry',
  size_range: 'size_range',
  founded_year: 'founded_year',
  description: 'description',
  status: 'status',
  verified: 'verified',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  registration_number_verified: 'registration_number_verified',
  registration_number_last_checked: 'registration_number_last_checked',
  registration_number_validation_details: 'registration_number_validation_details',
  tax_id_verified: 'tax_id_verified',
  tax_id_last_checked: 'tax_id_last_checked',
  tax_id_validation_details: 'tax_id_validation_details',
  domain_name: 'domain_name',
  domain_verification_token: 'domain_verification_token',
  domain_verified: 'domain_verified',
  domain_last_checked: 'domain_last_checked'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  stripe_invoice_id: 'stripe_invoice_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  pdf_url: 'pdf_url',
  created_at: 'created_at'
};

exports.Prisma.Organization_membersScalarFieldEnum = {
  organization_id: 'organization_id',
  user_id: 'user_id',
  role: 'role',
  is_owner: 'is_owner',
  joined_at: 'joined_at'
};

exports.Prisma.OrganizationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logo_url: 'logo_url',
  website: 'website',
  is_active: 'is_active',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Payment_historyScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  subscription_id: 'subscription_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  billing_reason: 'billing_reason',
  invoice_url: 'invoice_url',
  created_at: 'created_at'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Profile_verification_requestsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  status: 'status',
  admin_feedback: 'admin_feedback',
  document_url: 'document_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProfilesScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  avatar_url: 'avatar_url',
  bio: 'bio',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  postal_code: 'postal_code',
  phone_number: 'phone_number',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Role_permissionsScalarFieldEnum = {
  role_id: 'role_id',
  permission_id: 'permission_id',
  created_at: 'created_at'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Subscription_plansScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price_id: 'price_id',
  billing_period: 'billing_period',
  amount: 'amount',
  currency: 'currency',
  features: 'features',
  team_size: 'team_size',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  customer_id: 'customer_id',
  subscription_id: 'subscription_id',
  plan: 'plan',
  status: 'status',
  current_period_end: 'current_period_end',
  cancel_at_period_end: 'cancel_at_period_end',
  trial_end: 'trial_end',
  created_at: 'created_at',
  updated_at: 'updated_at',
  organization_id: 'organization_id',
  plan_id: 'plan_id',
  current_period_start: 'current_period_start',
  stripe_subscription_id: 'stripe_subscription_id'
};

exports.Prisma.Team_licensesScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  total_seats: 'total_seats',
  used_seats: 'used_seats',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Team_membersScalarFieldEnum = {
  id: 'id',
  team_license_id: 'team_license_id',
  user_id: 'user_id',
  role: 'role',
  invited_email: 'invited_email',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_actions_logScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  user_id: 'user_id',
  action: 'action',
  status: 'status',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  target_resource_type: 'target_resource_type',
  target_resource_id: 'target_resource_id',
  details: 'details',
  event_timestamp: 'event_timestamp',
  updated_at: 'updated_at'
};

exports.Prisma.User_activity_logsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  activity_type: 'activity_type',
  description: 'description',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.User_invitationsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  role_id: 'role_id',
  organization_id: 'organization_id',
  invited_by: 'invited_by',
  status: 'status',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_preferencesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  language: 'language',
  theme: 'theme',
  notifications: 'notifications',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id',
  created_at: 'created_at'
};

exports.Prisma.User_settingsScalarFieldEnum = {
  user_id: 'user_id',
  theme: 'theme',
  language: 'language',
  email_notifications: 'email_notifications',
  push_notifications: 'push_notifications',
  two_factor_auth: 'two_factor_auth',
  login_alerts: 'login_alerts',
  preferences: 'preferences',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  provider: 'provider',
  provider_account_id: 'provider_account_id',
  provider_email: 'provider_email',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Api_keysScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  organization_id: 'organization_id',
  name: 'name',
  key_hash: 'key_hash',
  prefix: 'prefix',
  scopes: 'scopes',
  expires_at: 'expires_at',
  last_used_at: 'last_used_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_revoked: 'is_revoked'
};

exports.Prisma.WebhooksScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  organization_id: 'organization_id',
  name: 'name',
  url: 'url',
  events: 'events',
  secret: 'secret',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Webhook_deliveriesScalarFieldEnum = {
  id: 'id',
  webhook_id: 'webhook_id',
  event_type: 'event_type',
  payload: 'payload',
  status_code: 'status_code',
  response: 'response',
  error: 'error',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.code_challenge_method = exports.$Enums.code_challenge_method = {
  s256: 's256',
  plain: 'plain'
};

exports.factor_type = exports.$Enums.factor_type = {
  totp: 'totp',
  webauthn: 'webauthn',
  phone: 'phone'
};

exports.factor_status = exports.$Enums.factor_status = {
  unverified: 'unverified',
  verified: 'verified'
};

exports.one_time_token_type = exports.$Enums.one_time_token_type = {
  confirmation_token: 'confirmation_token',
  reauthentication_token: 'reauthentication_token',
  recovery_token: 'recovery_token',
  email_change_token_new: 'email_change_token_new',
  email_change_token_current: 'email_change_token_current',
  phone_change_token: 'phone_change_token'
};

exports.aal_level = exports.$Enums.aal_level = {
  aal1: 'aal1',
  aal2: 'aal2',
  aal3: 'aal3'
};

exports.address_type = exports.$Enums.address_type = {
  billing: 'billing',
  shipping: 'shipping',
  legal: 'legal'
};

exports.subscription_plan = exports.$Enums.subscription_plan = {
  free: 'free',
  premium: 'premium',
  business: 'business'
};

exports.subscription_status = exports.$Enums.subscription_status = {
  active: 'active',
  past_due: 'past_due',
  canceled: 'canceled',
  incomplete: 'incomplete',
  incomplete_expired: 'incomplete_expired',
  trialing: 'trialing',
  unpaid: 'unpaid'
};

exports.Prisma.ModelName = {
  audit_log_entries: 'audit_log_entries',
  flow_state: 'flow_state',
  identities: 'identities',
  instances: 'instances',
  mfa_amr_claims: 'mfa_amr_claims',
  mfa_challenges: 'mfa_challenges',
  mfa_factors: 'mfa_factors',
  one_time_tokens: 'one_time_tokens',
  refresh_tokens: 'refresh_tokens',
  saml_providers: 'saml_providers',
  saml_relay_states: 'saml_relay_states',
  schema_migrations: 'schema_migrations',
  sessions: 'sessions',
  sso_domains: 'sso_domains',
  sso_providers: 'sso_providers',
  users: 'users',
  audit_logs: 'audit_logs',
  company_addresses: 'company_addresses',
  company_profiles: 'company_profiles',
  invoices: 'invoices',
  organization_members: 'organization_members',
  organizations: 'organizations',
  payment_history: 'payment_history',
  permissions: 'permissions',
  profile_verification_requests: 'profile_verification_requests',
  profiles: 'profiles',
  role_permissions: 'role_permissions',
  roles: 'roles',
  subscription_plans: 'subscription_plans',
  subscriptions: 'subscriptions',
  team_licenses: 'team_licenses',
  team_members: 'team_members',
  user_actions_log: 'user_actions_log',
  user_activity_logs: 'user_activity_logs',
  user_invitations: 'user_invitations',
  user_preferences: 'user_preferences',
  user_roles: 'user_roles',
  user_settings: 'user_settings',
  account: 'account',
  api_keys: 'api_keys',
  webhooks: 'webhooks',
  webhook_deliveries: 'webhook_deliveries'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
